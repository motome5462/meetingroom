const MeetingList = require('../models/meetinglist');
const Employee = require('../models/employee');
const sendEmail = require('../utils/mailer');

// üß© User Dashboard
exports.dashboard = async (req, res) => {
  try {
    const user = req.session.user;
    const { room: roomFilter, date: dateFilter } = req.query;

    const employee = await Employee.findOne({ employeeid: user.username });
    if (!employee) {
      return res.status(404).send('Employee not found');
    }

    const allMeetings = await MeetingList.find({ employee: employee._id })
      .populate('participants', 'name')
      .lean();

    let filteredMeetings = allMeetings;

    if (roomFilter && roomFilter.trim() !== '') {
      filteredMeetings = filteredMeetings.filter(meeting => meeting.room.trim() === roomFilter.trim());
    }
    if (dateFilter && dateFilter.trim() !== '') {
      filteredMeetings = filteredMeetings.filter(m => {
        const meetingDate = new Date(m.datetimein).toISOString().split('T')[0];
        return meetingDate === dateFilter;
      });
    }

    const getRoomNumber = (roomName) => {
      if (typeof roomName !== 'string') return 0;
      const match = roomName.trim().match(/\d+$/);
      return match ? parseInt(match[0], 10) : 0;
    };

    const sortedMeetings = [...filteredMeetings].sort((a, b) => {
      const dateA = new Date(a.datetimein);
      const dateB = new Date(b.datetimein);
      const dayA = new Date(dateA.getFullYear(), dateA.getMonth(), dateA.getDate());
      const dayB = new Date(dateB.getFullYear(), dateB.getMonth(), dateB.getDate());

      if (dayB - dayA !== 0) return dayB - dayA;

      const roomNumberA = getRoomNumber(a.room);
      const roomNumberB = getRoomNumber(b.room);
      if (roomNumberA !== roomNumberB) return roomNumberA - roomNumberB;

      return dateA - dateB;
    });

    res.render('user-dashboard', {
      user,
      employeeName: employee.name,
      meetings: sortedMeetings,
      roomFilter,
      dateFilter,
    });
  } catch (err) {
    console.error('User dashboard error:', err);
    res.status(500).send('Server error');
  }
};

// ‚ûï Create Meeting (with email notification for all)
exports.createMeeting = async (req, res) => {
  console.log('===> createMeeting called');
  try {
    const { room, date, timein, timeout, purpose, customPurpose, equipment, remark, participants } = req.body;
    const user = req.session.user;

    const employee = await Employee.findOne({ employeeid: user.username });
    if (!employee) return res.status(404).send('Employee not found');

    const datetimein = new Date(`${date}T${timein}`);
    const datetimeout = new Date(`${date}T${timeout}`);

    if (datetimeout <= datetimein) {
      req.flash('error_msg', '‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
      return res.redirect('back');
    }

    const finalPurpose = (purpose === '‡∏≠‡∏∑‡πà‡∏ô ‡πÜ' && customPurpose) ? customPurpose : purpose;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
    console.log('Raw participants from form:', participants);

    let participantIds = [];
    if (participants) {
      // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠ string
      const ids = Array.isArray(participants) ? participants.map(id => Number(id)) : [Number(participants)];
      console.log('Converted participant ids:', ids);
      const found = await Employee.find({ employeeid: { $in: ids } });
      participantIds = found.map(emp => emp._id);
      console.log('participantIds:', participantIds);
    }

    if (!participantIds.some(id => id.equals(employee._id))) {
      participantIds.push(employee._id);
    }

    const newMeeting = new MeetingList({
      employee: employee._id, room, datetimein, datetimeout,
      purpose: finalPurpose, equipment, remark,
      participants: participantIds, approval: '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'
    });

    await newMeeting.save();

    const populatedMeeting = await MeetingList.findById(newMeeting._id)
      .populate('employee', 'name email')
      .populate('participants', 'name email');

    console.log('populatedMeeting.employee:', populatedMeeting.employee);
    console.log('populatedMeeting.participants:', populatedMeeting.participants);

    const recipients = new Set(populatedMeeting.participants.map(p => p.email).filter(Boolean));
    if (populatedMeeting.employee && populatedMeeting.employee.email) recipients.add(populatedMeeting.employee.email);
    const bccList = Array.from(recipients).join(',');

    console.log('BCC (createMeeting):', bccList);

    const subjectToParticipants = `‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°: ${populatedMeeting.purpose}`;
    const htmlToParticipants = `
      <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°,</p>
      <p>‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏¥‡∏ç‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á "<b>${populatedMeeting.purpose}</b>" ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏∏‡∏ì ${populatedMeeting.employee.name}</p>
      <p><b>‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤:</b> ${new Date(populatedMeeting.datetimein).toLocaleString('th-TH')}</p>
      <p><b>‡∏´‡πâ‡∏≠‡∏á:</b> ${populatedMeeting.room}</p>
      <p><i>*** ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö ***</i></p>
      <hr>
      <p>‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö MeetingRoom</p>
    `;

    const result = await sendEmail('', subjectToParticipants, htmlToParticipants, bccList);
    console.log('Send result (participants):', result);

    if (result) {
      req.flash('success_msg', '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      req.flash('error_msg', '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    }

    res.redirect('/user/dashboard');
  } catch (err) {
    console.error('Create meeting error:', err);
    req.flash('error_msg', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á');
    res.status(500).send('Server error');
  }
};

// üóëÔ∏è Delete Meeting (with email notification for all)
exports.deleteMeeting = async (req, res) => {
  try {
    const { id } = req.body;
    const user = req.session.user;

    const employee = await Employee.findOne({ employeeid: user.username });
    if (!employee) return res.status(403).json({ success: false, message: 'User not found.' });

    const deletedMeeting = await MeetingList.findById(id)
      .populate('employee', 'name email')
      .populate('participants', 'name email');

    if (!deletedMeeting) return res.status(404).json({ success: false, message: 'Meeting not found.' });
    if (deletedMeeting.employee._id.toString() !== employee._id.toString()) {
      return res.status(403).json({ success: false, message: 'Permission denied.' });
    }

    await MeetingList.findByIdAndDelete(id);

    const subject = `[‡∏ñ‡∏π‡∏Å‡∏•‡∏ö] ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°: ${deletedMeeting.purpose}`;
    const htmlBody = `
        <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏ó‡∏∏‡∏Å‡∏ó‡πà‡∏≤‡∏ô,</p>
        <p>‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á "<b>${deletedMeeting.purpose}</b>" ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${new Date(deletedMeeting.datetimein).toLocaleDateString('th-TH')} ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß</p>
    `;

    console.log('populatedMeeting.employee:', deletedMeeting.employee);
    console.log('populatedMeeting.participants:', deletedMeeting.participants);

    const recipients = new Set(deletedMeeting.participants.map(p => p.email).filter(Boolean));
    if (deletedMeeting.employee && deletedMeeting.employee.email) recipients.add(deletedMeeting.employee.email);
    const bccList = Array.from(recipients).join(',');

    console.log('BCC (deleteMeeting):', bccList);

    const result = await sendEmail('', subject, htmlBody, bccList);
    console.log('Send result (deleteMeeting):', result);

    res.json({ success: true });
  } catch (err) {
    console.error('Delete meeting error:', err);
    res.status(500).json({ success: false, message: 'Server error' });
  }
};

// üõë Cancel Meeting (with email notification for all)
exports.cancelMeeting = async (req, res) => {
  try {
    const { id } = req.body;
    const user = req.session.user;

    const employee = await Employee.findOne({ employeeid: user.username });
    if (!employee) return res.status(403).json({ success: false, message: 'User not found.' });

    const meetingToUpdate = await MeetingList.findById(id);
    if (!meetingToUpdate) return res.status(404).json({ success: false, message: 'Meeting not found.' });
    if (meetingToUpdate.employee.toString() !== employee._id.toString()) {
      return res.status(403).json({ success: false, message: 'Permission denied.' });
    }

    meetingToUpdate.approval = '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å';
    await meetingToUpdate.save();
    
    const canceledMeeting = await MeetingList.findById(id)
        .populate('employee', 'name email')
        .populate('participants', 'name email');

    const subject = `[‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å] ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°: ${canceledMeeting.purpose}`;
    const htmlBody = `
        <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏ó‡πà‡∏≤‡∏ô,</p>
        <p>‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á "<b>${canceledMeeting.purpose}</b>" ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${new Date(canceledMeeting.datetimein).toLocaleDateString('th-TH')} ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß</p>
        <p>‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å</p>
    `;

    console.log('populatedMeeting.employee:', canceledMeeting.employee);
    console.log('populatedMeeting.participants:', canceledMeeting.participants);

    const recipients = new Set(canceledMeeting.participants.map(p => p.email).filter(Boolean));
    if (canceledMeeting.employee && canceledMeeting.employee.email) recipients.add(canceledMeeting.employee.email);
    const bccList = Array.from(recipients).join(',');

    console.log('BCC (cancelMeeting):', bccList);

    const result = await sendEmail('', subject, htmlBody, bccList);
    console.log('Send result (cancelMeeting):', result);

    res.json({ success: true });
  } catch (err) {
    console.error('Cancel meeting error:', err);
    res.status(500).json({ success: false, message: 'Server error' });
  }
};

// ‚úèÔ∏è Show Edit Meeting Page
exports.editMeetingPage = async (req, res) => {
  try {
    const meeting = await MeetingList.findById(req.params.id).populate('participants');
    if (!meeting) return res.status(404).send('Meeting not found');

    const user = req.session.user;
    const employee = await Employee.findOne({ employeeid: user.username });
    if (!employee || meeting.employee.toString() !== employee._id.toString()) {
      return res.status(403).send('Permission denied.');
    }
    const employees = await Employee.find({});
    res.render('edit-meeting', { meeting, employees, user: req.session.user });
  } catch (err) {
    console.error('Edit meeting page error:', err);
    res.status(500).send('Server error');
  }
};

// üîÑ Update Meeting (with email notification for all)
exports.updateMeeting = async (req, res) => {
  try {
    const { id } = req.params;
    const { datetimein, datetimeout, room, purpose, participants, equipment, remark } = req.body;

    const meeting = await MeetingList.findById(id);
    if (!meeting) return res.status(404).send('Meeting not found');

    const user = req.session.user;
    const employee = await Employee.findOne({ employeeid: user.username });
    if (!employee || meeting.employee.toString() !== employee._id.toString()) {
      return res.status(403).send('Permission denied.');
    }

    let participantIds = [];
    if (participants) {
      const ids = Array.isArray(participants) ? participants.map(id => Number(id)) : [Number(participants)];
      const found = await Employee.find({ employeeid: { $in: ids } });
      participantIds = found.map(emp => emp._id);
    }

    const updatedMeeting = await MeetingList.findByIdAndUpdate(id, 
        { datetimein, datetimeout, room, purpose, participants: participantIds, equipment, remark, approval: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' },
        { new: true }
    )
    .populate('employee', 'name email')
    .populate('participants', 'name email');

    const subject = `[‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï] ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°: ${updatedMeeting.purpose}`;
    const htmlBody = `
        <p>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏ó‡πà‡∏≤‡∏ô,</p>
        <p>‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á "<b>${updatedMeeting.purpose}</b>" ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà</p>
        <ul>
            <li><b>‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°:</b> ${updatedMeeting.room}</li>
            <li><b>‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà:</b> ${new Date(updatedMeeting.datetimein).toLocaleString('th-TH')}</li>
        </ul>
        <hr>
        <p>‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö MeetingRoom</p>
    `;
    
    console.log('populatedMeeting.employee:', updatedMeeting.employee);
    console.log('populatedMeeting.participants:', updatedMeeting.participants);

    const recipients = new Set(updatedMeeting.participants.map(p => p.email).filter(Boolean));
    if (updatedMeeting.employee && updatedMeeting.employee.email) recipients.add(updatedMeeting.employee.email);
    const bccList = Array.from(recipients).join(',');

    console.log('BCC (updateMeeting):', bccList);

    const result = await sendEmail('', subject, htmlBody, bccList);
    console.log('Send result (updateMeeting):', result);

    if (result) {
      req.flash('success_msg', '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      req.flash('error_msg', '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }

    res.redirect('/user/dashboard');
  } catch (err) {
    console.error('Update meeting error:', err);
    req.flash('error_msg', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    res.status(500).send('Server error');
  }
};